import tkinter as tk
from tkinter import ttk, filedialog
import pandas as pd
import teradatasql

class CSVUploaderApp:
    def __init__(self, root):
        self.root = root
        self.root.title("CSV Uploader")

        self.file_path_label = ttk.Label(root, text="No file selected")
        self.file_path_label.pack(pady=10)

        self.browse_button = ttk.Button(root, text="Browse", command=self.browse_file)
        self.browse_button.pack(pady=10)

        self.variable_types = {}
        self.variable_lengths = {}
        self.types_frame = ttk.Frame(root)
        self.types_frame.pack(pady=10)

        self.username_label = ttk.Label(root, text="Username:")
        self.username_label.pack()
        self.username_entry = ttk.Entry(root)
        self.username_entry.pack(pady=5)

        self.password_label = ttk.Label(root, text="Password:")
        self.password_label.pack()
        self.password_entry = ttk.Entry(root, show="*")
        self.password_entry.pack(pady=10)

        self.connect_button = ttk.Button(root, text="Connect to Teradata", command=self.connect_to_teradata)
        self.connect_button.pack(pady=10)

        self.status_var = tk.StringVar()
        self.status_bar = ttk.Label(root, textvariable=self.status_var)
        self.status_bar.pack(pady=5)

        self.error_var = tk.StringVar()
        self.error_bar = ttk.Label(root, textvariable=self.error_var, foreground="red")
        self.error_bar.pack(pady=5)

        self.upload_button = ttk.Button(root, text="Upload", command=self.upload_csv)
        self.upload_button.pack(pady=10)

        self.append_button = ttk.Button(root, text="Append to Teradata", command=self.append_to_teradata)
        self.append_button.pack(pady=10)

    def browse_file(self):
        file_path = filedialog.askopenfilename(filetypes=[("CSV files", "*.csv")])
        self.file_path_label.config(text=file_path)
        self.load_csv(file_path)

    def load_csv(self, file_path):
        try:
            df = pd.read_csv(file_path)
        except pd.errors.EmptyDataError:
            self.show_error("Selected file is empty.")

    def connect_to_teradata(self):
        username = self.username_entry.get()
        password = self.password_entry.get()

        if not username or not password:
            self.show_error("Please enter both username and password.")
            return

        try:
            with teradatasql.connect(host='your_teradata_host', user=username, password=password) as connection:
                self.show_status("Connected to Teradata")
        except teradatasql.DatabaseError as e:
            self.show_error(f"Error connecting to Teradata: {e}")

    def upload_csv(self):
        file_path = self.file_path_label.cget("text")

        if file_path == "No file selected":
            self.show_error("Please select a CSV file.")
            return

        variable_types = {column: var.get() for column, var in self.variable_types.items()}
        variable_lengths = {column: entry.get() for column, entry in self.variable_lengths.items()}

        print("File Path:", file_path)
        print("Variable Types:", variable_types)
        print("Variable Lengths:", variable_lengths)

    def show_status(self, message):
        self.status_var.set(message)
        self.root.update_idletasks()

    def show_error(self, message):
        self.error_var.set(message)
        self.root.update_idletasks()
    def append_to_teradata(self):
        file_path = self.file_path_label.cget("text")

        if file_path == "No file selected":
            self.show_error("Please select a CSV file.")
            return

        table_name = "your_teradata_table"  # Replace with your actual Teradata table name

        variable_types = {column: var.get() for column, var in self.variable_types.items()}
        variable_lengths = {column: entry.get() for column, entry in self.variable_lengths.items()}

        try:
            with teradatasql.connect(host='your_teradata_host', user='your_username', password='your_password') as connection:
                cursor = connection.cursor()

                # Create table if it doesn't exist
                create_table_query = f"CREATE TABLE {table_name} ({', '.join([f'{col} {variable_types[col]}({variable_lengths.get(col, 255)})' for col in variable_types.keys()])})"
                cursor.execute(create_table_query)

                # Append data to the table
                df = pd.read_csv(file_path)
                df.to_sql(table_name, connection, index=False, if_exists='append', chunksize=1000)

            self.show_status(f"Data appended to {table_name} in Teradata")
        except teradatasql.DatabaseError as e:
            self.show_error(f"Error appending data to Teradata: {e}")

if __name__ == "__main__":
    root = tk.Tk()
    app = CSVUploaderApp(root)
    root.mainloop()
